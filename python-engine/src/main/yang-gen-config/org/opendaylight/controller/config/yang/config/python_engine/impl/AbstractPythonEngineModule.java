/*
* Generated file
*
* Generated from: yang module name: python-engine-impl yang module local name: python-engine-impl
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Mon May 16 17:47:02 BST 2016
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.config.python_engine.impl;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(namespace = "urn:opendaylight:params:xml:ns:yang:controller:config:python-engine:impl", name = "python-engine-impl", revision = "2016-05-16")

public abstract class AbstractPythonEngineModule extends org.opendaylight.controller.config.spi.AbstractModule<AbstractPythonEngineModule> implements org.opendaylight.controller.config.yang.config.python_engine.impl.PythonEngineModuleMXBean {
    private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.config.python_engine.impl.AbstractPythonEngineModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute bindingAwareBrokerJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BindingAwareBroker");
    private javax.management.ObjectName bindingAwareBroker; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute dataBrokerJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DataBroker");
    private javax.management.ObjectName dataBroker; // optional

    public static final org.opendaylight.controller.config.api.JmxAttribute schemaServiceJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SchemaService");
    private javax.management.ObjectName schemaService; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute domDataBrokerJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DomDataBroker");
    private javax.management.ObjectName domDataBroker; // mandatory

    //attributes end

    public AbstractPythonEngineModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public AbstractPythonEngineModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractPythonEngineModule oldModule,java.lang.AutoCloseable oldInstance) {
        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate() {
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.binding.BindingAwareBrokerServiceInterface.class, bindingAwareBroker, bindingAwareBrokerJmxAttribute);
        if(dataBroker != null) {
            dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.binding.DataBrokerServiceInterface.class, dataBroker, dataBrokerJmxAttribute);
        }
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.dom.SchemaServiceServiceInterface.class, schemaService, schemaServiceJmxAttribute);
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.dom.DOMDataBrokerServiceInterface.class, domDataBroker, domDataBrokerJmxAttribute);

        customValidation();
    }

    protected void customValidation() {
    }

    private org.opendaylight.controller.sal.binding.api.BindingAwareBroker bindingAwareBrokerDependency;
    protected final org.opendaylight.controller.sal.binding.api.BindingAwareBroker getBindingAwareBrokerDependency(){
        return bindingAwareBrokerDependency;
    }private org.opendaylight.controller.md.sal.binding.api.DataBroker dataBrokerDependency;
    protected final org.opendaylight.controller.md.sal.binding.api.DataBroker getDataBrokerDependency(){
        return dataBrokerDependency;
    }private org.opendaylight.controller.sal.core.api.model.SchemaService schemaServiceDependency;
    protected final org.opendaylight.controller.sal.core.api.model.SchemaService getSchemaServiceDependency(){
        return schemaServiceDependency;
    }private org.opendaylight.controller.md.sal.dom.api.DOMDataBroker domDataBrokerDependency;
    protected final org.opendaylight.controller.md.sal.dom.api.DOMDataBroker getDomDataBrokerDependency(){
        return domDataBrokerDependency;
    }

    protected final void resolveDependencies() {
        bindingAwareBrokerDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.sal.binding.api.BindingAwareBroker.class, bindingAwareBroker, bindingAwareBrokerJmxAttribute);
        if (dataBroker!=null) {
            dataBrokerDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.md.sal.binding.api.DataBroker.class, dataBroker, dataBrokerJmxAttribute);
        }
        schemaServiceDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.sal.core.api.model.SchemaService.class, schemaService, schemaServiceJmxAttribute);
        domDataBrokerDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.md.sal.dom.api.DOMDataBroker.class, domDataBroker, domDataBrokerJmxAttribute);
    }

    public boolean canReuseInstance(AbstractPythonEngineModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractPythonEngineModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (!java.util.Objects.deepEquals(bindingAwareBroker, other.bindingAwareBroker)) {
            return false;
        }
        if(bindingAwareBroker!= null) {
            if (!dependencyResolver.canReuseDependency(bindingAwareBroker, bindingAwareBrokerJmxAttribute)) { // reference to dependency must be reusable as well
                return false;
            }
        }
        if (!java.util.Objects.deepEquals(dataBroker, other.dataBroker)) {
            return false;
        }
        if(dataBroker!= null) {
            if (!dependencyResolver.canReuseDependency(dataBroker, dataBrokerJmxAttribute)) { // reference to dependency must be reusable as well
                return false;
            }
        }
        if (!java.util.Objects.deepEquals(schemaService, other.schemaService)) {
            return false;
        }
        if(schemaService!= null) {
            if (!dependencyResolver.canReuseDependency(schemaService, schemaServiceJmxAttribute)) { // reference to dependency must be reusable as well
                return false;
            }
        }
        if (!java.util.Objects.deepEquals(domDataBroker, other.domDataBroker)) {
            return false;
        }
        if(domDataBroker!= null) {
            if (!dependencyResolver.canReuseDependency(domDataBroker, domDataBrokerJmxAttribute)) { // reference to dependency must be reusable as well
                return false;
            }
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
    if (this == o) { return true; }
    if (o == null || getClass() != o.getClass()) { return false; }
        AbstractPythonEngineModule that = (AbstractPythonEngineModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public javax.management.ObjectName getBindingAwareBroker() {
        return bindingAwareBroker;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.binding.BindingAwareBrokerServiceInterface.class)
    public void setBindingAwareBroker(javax.management.ObjectName bindingAwareBroker) {
        this.bindingAwareBroker = bindingAwareBroker;
    }

    @Override
    public javax.management.ObjectName getDataBroker() {
        return dataBroker;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.binding.DataBrokerServiceInterface.class)
    public void setDataBroker(javax.management.ObjectName dataBroker) {
        this.dataBroker = dataBroker;
    }

    @Override
    public javax.management.ObjectName getSchemaService() {
        return schemaService;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.dom.SchemaServiceServiceInterface.class)
    public void setSchemaService(javax.management.ObjectName schemaService) {
        this.schemaService = schemaService;
    }

    @Override
    public javax.management.ObjectName getDomDataBroker() {
        return domDataBroker;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.dom.DOMDataBrokerServiceInterface.class)
    public void setDomDataBroker(javax.management.ObjectName domDataBroker) {
        this.domDataBroker = domDataBroker;
    }

    public org.slf4j.Logger getLogger() {
        return LOGGER;
    }

}
